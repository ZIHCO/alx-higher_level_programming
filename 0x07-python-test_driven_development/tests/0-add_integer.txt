===========================
The "0-add_integer" module
===========================

Import "add_integer" from "0-add_integer" module:
-------------------------------------------------
	>>> add_integer = __import__("0-add_integer").add_integer

Checking for module docstring:
------------------------------
	>>> m = __import__("0-add_integer").__doc__
	>>> len(m) > 1
	True

Checking for function docstring:
--------------------------------
	>>> n = __import__("0-add_integer").add_integer.__doc__
	>>> len(n) > 1
	True

Cases between two integers:
---------------------------
	>>> add_integer(2, 4)
	6

	>>> add_integer(-3, -8)
	-11

	>>> add_integer(-5, 8)
	3

	>>> add_integer(5, -8)
	-3

Cases between integer and float:
--------------------------------
	>>> add_integer(3.1, -3)
	0

	>>> add_integer(4, -9.4)
	-5

Case between two floats:
------------------------
	>>> add_integer(5.44, 6.56)
	11

Case for NaN:
-------------
	>>> add_integer(2, NaN)
	Traceback (most recent call last):
	NameError: name 'NaN' is not defined

	>>> add_integer("3", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

Case for 0 parameter:
---------------------
	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

Case for infinity float:
------------------------
	>>> add_integer(5, 1e4000)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Case for output type:
---------------------
	>>> type(add_integer(4.6, 8))
	<class 'int'>

Case for None a:
----------------
	>>> add_integer(None, 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

Case for missing 1 parameter:
-----------------------------
	>>> add_integer(1)
	99

Case for converting NaN to integer:
----------------------------------
	>>> add_integer(1, float('kill'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
